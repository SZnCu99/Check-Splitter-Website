{"ast":null,"code":"var _jsxFileName = \"/Users/DeborahLiu/Desktop/mywebsite/frontend/my-app/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      name: null,\n      email: null,\n      intervalIsSet: false,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      fetch('http://localhost:3001/api/getData').then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.putDataToDB = (name, email) => {\n      axios.post('http://localhost:3001/api/putData', {\n        name: name,\n        email: email\n      });\n    };\n\n    this.deleteFromDB = idTodelete => {\n      // parseInt(idTodelete);\n      let objIdToDelete = null;\n      this.state.data.forEach(dat => {\n        if (dat.name === idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete('http://localhost:3001/api/deleteData', {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.updateDB = (name, newemail) => {\n      let objIdToUpdate = null; // parseInt(name);\n\n      this.state.data.forEach(dat => {\n        if (dat.name === name) {\n          objIdToUpdate = dat._id;\n        }\n      });\n      axios.post('http://localhost:3001/api/updateData', {\n        id: objIdToUpdate,\n        update: {\n          email: newemail\n        }\n      });\n    };\n\n    this.authentication = name => {\n      axios.post('http://localhost:3001/api/authentication', {\n        name: name\n      });\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const data = this.state.data;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.setState({\n        name: e.target.value\n      }),\n      placeholder: \"Your Username\",\n      style: {\n        width: '200px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.setState({\n        email: e.target.value\n      }),\n      placeholder: \"Your Email\",\n      style: {\n        width: '200px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.putDataToDB(this.state.name, this.state.email),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"SIGN UP\"), React.createElement(\"button\", {\n      onClick: () => this.authentication(this.state.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"LOG IN\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/DeborahLiu/Desktop/mywebsite/frontend/my-app/src/App.js"],"names":["React","Component","axios","App","state","data","name","email","intervalIsSet","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","post","deleteFromDB","idTodelete","objIdToDelete","forEach","dat","_id","delete","id","updateDB","newemail","objIdToUpdate","update","authentication","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","padding","e","target","value","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass App extends Component {\n  state = {\n    data: [],\n    name: null,\n    email: null,\n    intervalIsSet: false,\n    objectToUpdate: null,\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch('http://localhost:3001/api/getData')\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  putDataToDB = (name,email) => {\n    axios.post('http://localhost:3001/api/putData', {\n      name: name,\n      email: email,\n    });\n  };\n\n  // our delete method that uses our backend api\n  // to remove existing database information\n  deleteFromDB = (idTodelete) => {\n    // parseInt(idTodelete);\n    let objIdToDelete = null;\n    this.state.data.forEach((dat) => {\n      if (dat.name === idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete('http://localhost:3001/api/deleteData', {\n      data: {\n        id: objIdToDelete,\n      },\n    });\n  };\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (name, newemail) => {\n    let objIdToUpdate = null;\n    // parseInt(name);\n    this.state.data.forEach((dat) => {\n      if (dat.name === name) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post('http://localhost:3001/api/updateData', {\n      id: objIdToUpdate,\n      update: { email: newemail },\n    });\n  };\n\n  authentication = (name) => {\n    axios.post('http://localhost:3001/api/authentication',{\n      name: name,\n    });\n  }\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ name: e.target.value })}\n            placeholder=\"Your Username\"\n            style={{ width: '200px' }}\n          />\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ email: e.target.value })}\n            placeholder=\"Your Email\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.name,this.state.email)}>\n            SIGN UP\n          </button>\n          <button onClick={() => this.authentication(this.state.name)}>\n            LOG IN\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}