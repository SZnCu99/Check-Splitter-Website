{"ast":null,"code":"var _jsxFileName = \"/Users/DeborahLiu/Desktop/mywebsite/frontend/my-app/src/newRecord.js\";\nimport React, { Component } from \"react\";\nimport Cookies from \"js-cookie\";\nimport NewTransaction from \"./NewTransaction\";\nimport Table from \"react-table-6\";\nimport 'react-table-6/react-table.css';\nimport axios from 'axios';\n\nclass newRecord extends Component {\n  constructor() {\n    super();\n\n    this.getRecordFromDb = () => {\n      fetch('http://localhost:3001/api/getRecord', {\n        recordId: this.state.recordId\n      }).then(res => {\n        if (res.success == true) {\n          const record = res.record;\n          this.setState({\n            sharedBy: record.sharedBy,\n            recordId: record._id,\n            date: record.date,\n            created: true\n          });\n        } else {\n          alert(res.success);\n        }\n      });\n    };\n\n    this.getTransactionFromDb = () => {\n      fetch('http://localhost:3001/api/getTransaction').then(transactions => transactions.json()).then(res => {\n        this.setState({\n          transactions: res.transactions\n        });\n      });\n      console.log(this.state.transactions);\n    };\n\n    this.addSharedBy = name => {\n      var temp = [...this.state.sharedBy];\n      temp.push(name);\n      this.setState({\n        sharedBy: temp\n      });\n      var num = this.state.numShared + 1;\n      this.setState({\n        numShared: num\n      });\n      console.log(this.state.sharedBy);\n      console.log(this.state.numShared);\n      console.log(this.state.currentName);\n      console.log(this.state.owner);\n    };\n\n    this.createRecord = event => {\n      axios.post('http://localhost:3001/api/putRecord', {\n        owner: this.state.owner,\n        date: this.state.date,\n        transactions: []\n      }).then(response => {\n        if (response.data.success) {\n          this.setState({\n            recordId: response.data.recordId\n          });\n          Cookies.set('recordID', response.data.recordId);\n          this.setState({\n            created: true\n          });\n        }\n      });\n    };\n\n    this.state = {\n      recordId: Cookies.get('recordId'),\n      owner: Cookies.get(\"name\"),\n      date: null,\n      transactions: [],\n      currentName: null,\n      sharedBy: [Cookies.get(\"name\")],\n      numShared: 1,\n      intervalIsSet: false,\n      created: false,\n      errors: {}\n    };\n  }\n\n  componentDidMount() {\n    alert(this.state.recordId);\n    this.getRecordFromDb();\n    this.getTransactionFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  }\n\n  render() {\n    const columns = [{\n      Header: 'Payer',\n      accessor: 'payer'\n    }, {\n      Header: 'Amount',\n      accessor: 'amount'\n    }, {\n      Header: 'Shared With',\n      accessor: 'displayShared'\n    }, {\n      Header: 'Comment',\n      accessor: 'comment'\n    }];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Creating new record for \", this.state.owner, \"...\", React.createElement(\"label\", {\n      style: this.state.created ? {\n        display: 'none'\n      } : {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Shared with:\", this.state.sharedBy, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"name\",\n      onChange: e => this.setState({\n        currentName: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.addSharedBy(this.state.currentName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Add Sharer\"), React.createElement(\"input\", {\n      type: \"date\",\n      placeholder: \"date\",\n      onChange: e => this.setState({\n        date: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: e => this.createRecord(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Create New Record\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Table, {\n      columns: columns,\n      data: this.state.transactions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(NewTransaction, {\n      sharedPeople: this.state.sharedBy,\n      num: this.state.numShared,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default newRecord;","map":{"version":3,"sources":["/Users/DeborahLiu/Desktop/mywebsite/frontend/my-app/src/newRecord.js"],"names":["React","Component","Cookies","NewTransaction","Table","axios","newRecord","constructor","getRecordFromDb","fetch","recordId","state","then","res","success","record","setState","sharedBy","_id","date","created","alert","getTransactionFromDb","transactions","json","console","log","addSharedBy","name","temp","push","num","numShared","currentName","owner","createRecord","event","post","response","data","set","get","intervalIsSet","errors","componentDidMount","interval","setInterval","getDataFromDb","componentWillUnmount","clearInterval","render","columns","Header","accessor","display","e","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cookies from \"js-cookie\";\nimport NewTransaction from \"./NewTransaction\";\nimport Table from \"react-table-6\";\nimport 'react-table-6/react-table.css'\nimport axios from 'axios';\n\nclass newRecord extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n    recordId: Cookies.get('recordId'),\n    owner: Cookies.get(\"name\"),\n    date: null,\n    transactions: [],\n    currentName: null,\n    sharedBy: [Cookies.get(\"name\")],\n    numShared: 1,\n    intervalIsSet: false,\n    created: false,\n    errors: {}\n  };\n\n}\n\n  componentDidMount() {\n  \n    alert(this.state.recordId);\n    this.getRecordFromDb();\n\n    this.getTransactionFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n\n  getRecordFromDb = () => {\n    fetch('http://localhost:3001/api/getRecord', {recordId: this.state.recordId})\n      .then((res) => {\n        if(res.success == true){\n        const record = res.record;\n        this.setState({ sharedBy: record.sharedBy, recordId: record._id, date: record.date, created: true})\n        }\n        else{\n          alert(res.success);\n          \n        }\n      });\n  };\n\n  getTransactionFromDb = () => {\n    fetch('http://localhost:3001/api/getTransaction')\n      .then((transactions) => transactions.json())\n      .then((res) => {\n        this.setState({ transactions: res.transactions});\n        });\n      console.log(this.state.transactions);\n  };\n\n  addSharedBy = (name) => {\n    var temp = [...this.state.sharedBy];\n    temp.push(name);\n    this.setState({sharedBy: temp});\n    var num = this.state.numShared + 1;\n    this.setState({numShared:num});\n    console.log(this.state.sharedBy);\n    console.log(this.state.numShared);\n    console.log(this.state.currentName);\n    console.log(this.state.owner);\n  };\n\n  createRecord = (event) =>{\n      axios.post('http://localhost:3001/api/putRecord', {\n        owner: this.state.owner,\n        date: this.state.date,\n        transactions: [],\n    }).then((response) => {\n        if(response.data.success){\n          this.setState({recordId: response.data.recordId});\n          Cookies.set('recordID',response.data.recordId);\n          this.setState({created: true});\n        }\n    });\n  };\n\n\n  \n  render() {\n    const columns = [\n            {\n              Header: 'Payer',\n              accessor: 'payer',\n            },\n            {\n              Header: 'Amount',\n              accessor: 'amount',\n            },\n            {\n              Header: 'Shared With',\n              accessor: 'displayShared'\n            },\n            {\n              Header: 'Comment',\n              accessor: 'comment',\n            },\n          ]\n\n    return (\n      <div>\n        \n          Creating new record for {this.state.owner}...\n          <label style={this.state.created ? {display: 'none'} : {}}>\n            Shared with:{this.state.sharedBy}\n            <input type=\"text\" placeholder=\"name\" onChange={(e) => this.setState({ currentName: e.target.value })}></input>\n            <button onClick={() =>this.addSharedBy(this.state.currentName)}>Add Sharer</button>\n            <input type=\"date\" placeholder=\"date\" onChange={(e) => this.setState({ date: e.target.value})}></input>\n            <button onClick={(e) => this.createRecord(e)}>Create New Record</button>\n          </label>\n          \n        <div>\n          <Table columns={columns} data={this.state.transactions} />\n        </div>    \n        <div>\n        <NewTransaction sharedPeople={this.state.sharedBy} num={this.state.numShared}  />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default newRecord;\n"]},"metadata":{},"sourceType":"module"}