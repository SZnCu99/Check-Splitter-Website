{"ast":null,"code":"var _jsxFileName = \"/Users/DeborahLiu/Desktop/mywebsite/frontend/my-app/src/newRecord.js\";\nimport React, { Component } from \"react\";\nimport Cookies from \"js-cookie\";\nimport NewTransaction from \"./NewTransaction\";\nimport Table from \"react-table-6\";\nimport 'react-table-6/react-table.css';\nimport axios from 'axios';\n\nclass newRecord extends Component {\n  constructor() {\n    super();\n\n    this.getRecordFromDb = () => {};\n\n    this.getTransactionFromDb = () => {\n      fetch('http://localhost:3001/api/getTransaction').then(transactions => transactions.json()).then(res => {\n        this.setState({\n          transactions: res.transactions\n        });\n      });\n      console.log(this.state.transactions);\n    };\n\n    this.addSharedBy = name => {\n      var temp = [...this.state.sharedBy];\n      temp.push(name);\n      this.setState({\n        sharedBy: temp\n      });\n      var num = this.state.numShared + 1;\n      this.setState({\n        numShared: num\n      });\n      console.log(this.state.sharedBy);\n      console.log(this.state.numShared);\n      console.log(this.state.currentName);\n      console.log(this.state.owner);\n    };\n\n    this.createRecord = event => {\n      axios.post('http://localhost:3001/api/putRecord', {\n        owner: this.state.owner,\n        date: this.state.date,\n        transactions: []\n      }).then(response => {\n        if (response.data.success) {\n          this.setState({\n            recordId: response.data.recordId\n          });\n          this.setState({\n            created: true\n          });\n        }\n      });\n    };\n\n    this.state = {\n      recordId: null,\n      owner: Cookies.get(\"name\"),\n      date: null,\n      transactions: [],\n      currentName: null,\n      sharedBy: [Cookies.get(\"name\")],\n      numShared: 1,\n      intervalIsSet: false,\n      created: false,\n      errors: {}\n    };\n  }\n\n  componentDidMount() {\n    //    this.getRecordFromDb();\n    this.getTransactionFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  }\n\n  render() {\n    const columns = [{\n      Header: 'Payer',\n      accessor: 'payer'\n    }, {\n      Header: 'Amount',\n      accessor: 'amount'\n    }, {\n      Header: 'Shared With',\n      accessor: 'displayShared'\n    }, {\n      Header: 'Comment',\n      accessor: 'comment'\n    }];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Creating new record for \", this.state.owner, \"...\", React.createElement(\"label\", {\n      style: this.state.created ? {\n        display: 'none'\n      } : {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Shared with:\", this.state.sharedBy, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"name\",\n      onChange: e => this.setState({\n        currentName: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.addSharedBy(this.state.currentName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Add Sharer\"), React.createElement(\"input\", {\n      type: \"date\",\n      placeholder: \"date\",\n      onChange: e => this.setState({\n        date: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: e => this.createRecord(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Create New Record\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Table, {\n      columns: columns,\n      data: this.state.transactions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(NewTransaction, {\n      sharedPeople: this.state.sharedBy,\n      num: this.state.numShared,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default newRecord;","map":{"version":3,"sources":["/Users/DeborahLiu/Desktop/mywebsite/frontend/my-app/src/newRecord.js"],"names":["React","Component","Cookies","NewTransaction","Table","axios","newRecord","constructor","getRecordFromDb","getTransactionFromDb","fetch","then","transactions","json","res","setState","console","log","state","addSharedBy","name","temp","sharedBy","push","num","numShared","currentName","owner","createRecord","event","post","date","response","data","success","recordId","created","get","intervalIsSet","errors","componentDidMount","interval","setInterval","getDataFromDb","componentWillUnmount","clearInterval","render","columns","Header","accessor","display","e","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cookies from \"js-cookie\";\nimport NewTransaction from \"./NewTransaction\";\nimport Table from \"react-table-6\";\nimport 'react-table-6/react-table.css'\nimport axios from 'axios';\n\nclass newRecord extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n    recordId: null,\n    owner: Cookies.get(\"name\"),\n    date: null,\n    transactions: [],\n    currentName: null,\n    sharedBy: [Cookies.get(\"name\")],\n    numShared: 1,\n    intervalIsSet: false,\n    created: false,\n    errors: {}\n  };\n\n}\n\n  componentDidMount() {\n  \n//    this.getRecordFromDb();\n\n    this.getTransactionFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n\n  getRecordFromDb = () => {\n    \n  };\n\n  getTransactionFromDb = () => {\n    fetch('http://localhost:3001/api/getTransaction')\n      .then((transactions) => transactions.json())\n      .then((res) => {\n        this.setState({ transactions: res.transactions});\n        });\n      console.log(this.state.transactions);\n  };\n\n  addSharedBy = (name) => {\n    var temp = [...this.state.sharedBy];\n    temp.push(name);\n    this.setState({sharedBy: temp});\n    var num = this.state.numShared + 1;\n    this.setState({numShared:num});\n    console.log(this.state.sharedBy);\n    console.log(this.state.numShared);\n    console.log(this.state.currentName);\n    console.log(this.state.owner);\n  };\n\n  createRecord = (event) =>{\n      axios.post('http://localhost:3001/api/putRecord', {\n        owner: this.state.owner,\n        date: this.state.date,\n        transactions: [],\n    }).then((response) => {\n        if(response.data.success){\n          this.setState({recordId: response.data.recordId});\n          this.setState({created: true});\n        }\n    });\n  };\n\n\n  \n  render() {\n    const columns = [\n            {\n              Header: 'Payer',\n              accessor: 'payer',\n            },\n            {\n              Header: 'Amount',\n              accessor: 'amount',\n            },\n            {\n              Header: 'Shared With',\n              accessor: 'displayShared'\n            },\n            {\n              Header: 'Comment',\n              accessor: 'comment',\n            },\n          ]\n\n    return (\n      <div>\n        \n          Creating new record for {this.state.owner}...\n          <label style={this.state.created ? {display: 'none'} : {}}>\n            Shared with:{this.state.sharedBy}\n            <input type=\"text\" placeholder=\"name\" onChange={(e) => this.setState({ currentName: e.target.value })}></input>\n            <button onClick={() =>this.addSharedBy(this.state.currentName)}>Add Sharer</button>\n            <input type=\"date\" placeholder=\"date\" onChange={(e) => this.setState({ date: e.target.value})}></input>\n            <button onClick={(e) => this.createRecord(e)}>Create New Record</button>\n          </label>\n          \n        <div>\n          <Table columns={columns} data={this.state.transactions} />\n        </div>    \n        <div>\n        <NewTransaction sharedPeople={this.state.sharedBy} num={this.state.numShared}  />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default newRecord;\n"]},"metadata":{},"sourceType":"module"}