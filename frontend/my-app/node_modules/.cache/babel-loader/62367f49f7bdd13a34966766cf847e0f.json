{"ast":null,"code":"var _jsxFileName = \"/Users/DeborahLiu/Desktop/mywebsite/frontend/my-app/src/newRecord.js\";\nimport React, { Component } from \"react\";\nimport Cookies from \"js-cookie\";\nimport NewTransaction from \"./NewTransaction\";\nimport { useTable } from \"react-table\";\n\nfunction Table({\n  columns,\n  data\n}) {\n  // Use the state and functions returned from useTable to build your UI\n  const _useTable = useTable({\n    columns,\n    data\n  }),\n        getTableProps = _useTable.getTableProps,\n        getTableBodyProps = _useTable.getTableBodyProps,\n        headerGroups = _useTable.headerGroups,\n        rows = _useTable.rows,\n        prepareRow = _useTable.prepareRow; // Render the UI for your table\n\n\n  return React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, headerGroups.map(headerGroup => React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), headerGroup.headers.map(column => React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), column.render('Header')))))), React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), rows.map((row, i) => {\n    prepareRow(row);\n    return React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), row.cells.map(cell => {\n      return React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), cell.render('Cell'));\n    }));\n  })));\n}\n\nclass newRecord extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      owner: Cookies.get(\"name\"),\n      transactions: {},\n      currentName: null,\n      sharedBy: [Cookies.get(\"name\")],\n      numShared: 1,\n      intervalIsSet: false,\n      errors: {}\n    };\n\n    this.getTransactionFromDb = () => {\n      fetch('http://localhost:3001/api/getTransaction').then(transactions => transactions.json()).then(res => this.setState({\n        transactions: res.transactions\n      }));\n    };\n\n    this.addSharedBy = name => {\n      var temp = [...this.state.sharedBy];\n      temp.push(name);\n      this.setState({\n        sharedBy: temp\n      });\n      var num = this.state.numShared + 1;\n      this.setState({\n        numShared: num\n      });\n      console.log(this.state.sharedBy);\n      console.log(this.state.numShared);\n      console.log(this.state.currentName);\n      console.log(this.state.owner);\n    };\n  }\n\n  componentDidMount() {\n    this.getTransactionFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  }\n\n  render() {\n    const transactions = this.state.transactions;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Creating new record for \", this.state.owner, \"...\", React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Shared with:\", React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"name\",\n      onChange: e => this.setState({\n        currentName: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.addSharedBy(this.state.currentName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Add Sharer\"))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Table, {\n      columns: columns,\n      data: transactions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(NewTransaction, {\n      sharedPeople: this.state.sharedBy,\n      num: this.state.numShared,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default newRecord;","map":{"version":3,"sources":["/Users/DeborahLiu/Desktop/mywebsite/frontend/my-app/src/newRecord.js"],"names":["React","Component","Cookies","NewTransaction","useTable","Table","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","newRecord","state","owner","get","transactions","currentName","sharedBy","numShared","intervalIsSet","errors","getTransactionFromDb","fetch","then","json","res","setState","addSharedBy","name","temp","push","num","console","log","componentDidMount","interval","setInterval","getDataFromDb","componentWillUnmount","clearInterval","e","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cookies from \"js-cookie\";\nimport NewTransaction from \"./NewTransaction\";\nimport { useTable } from \"react-table\";\n\nfunction Table({ columns, data }) {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n  })\n\n  // Render the UI for your table\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\n\nclass newRecord extends Component {\n  state = {\n    owner: Cookies.get(\"name\"),\n    transactions: {},\n    currentName: null,\n    sharedBy: [Cookies.get(\"name\")],\n    numShared: 1,\n    intervalIsSet: false,\n    errors: {}\n  };\n\n  componentDidMount() {\n    this.getTransactionFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  getTransactionFromDb = () => {\n    fetch('http://localhost:3001/api/getTransaction')\n      .then((transactions) => transactions.json())\n      .then((res) => this.setState({ transactions: res.transactions}));\n  };\n\n  addSharedBy = (name) => {\n    var temp = [...this.state.sharedBy];\n    temp.push(name);\n    this.setState({sharedBy: temp});\n    var num = this.state.numShared + 1;\n    this.setState({numShared:num});\n    console.log(this.state.sharedBy);\n    console.log(this.state.numShared);\n    console.log(this.state.currentName);\n    console.log(this.state.owner);\n  };\n\n\n  \n  render() {\n    const { transactions } = this.state;\n    return (\n      <div>\n        <p>\n          Creating new record for {this.state.owner}...\n          <label>\n            Shared with:\n            <input type=\"text\" placeholder=\"name\" onChange={(e) => this.setState({ currentName: e.target.value })}></input>\n            <button onClick={() =>this.addSharedBy(this.state.currentName)}>Add Sharer</button>\n          </label>\n        </p>\n        <div>\n          <Table columns={columns} data={transactions} />\n        </div>    \n        <div>\n            <NewTransaction sharedPeople={this.state.sharedBy} num={this.state.numShared}  />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default newRecord;\n"]},"metadata":{},"sourceType":"module"}